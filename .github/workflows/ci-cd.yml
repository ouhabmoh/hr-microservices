# This is a basic workflow we will use in this demo

name: push-ecr
permissions:
     id-token: write # required to use OIDC authentication
     contents: write # required
     actions: read
     security-events: write
     statuses: write

on:
     push:
          branches: [dev]
env:
     ECR_REPOSITORY: hr-ld-academy-cluster-repository
     EKS_CLUSTER_NAME: learnk8s
     AWS_REGION: ${{ secrets.AWS_REGION }}
     PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING: 1

jobs:
     build:
          name: Build and Pushing the Image
          runs-on: ubuntu-latest

          steps:
               - name: Checkout
                 uses: actions/checkout@v2

               - name: Set Node.js
                 uses: actions/setup-node@v3
                 with:
                      node-version: 18.x

               - name: Install dependencies and run tests
                 run: |
                      cd ./auth
                      mv test.env .env
                      yarn install --pure-lockfile
                      yarn test

               - name: Configure AWS credentials
                 uses: aws-actions/configure-aws-credentials@v1
                 with:
                      # Use GitHub OIDC provider
                      role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
                      aws-region: ${{ secrets.AWS_REGION }}
               - name: Test AWS Creds
                 run: aws sts get-caller-identity

               - name: Login to Amazon ECR
                 id: login-ecr
                 uses: aws-actions/amazon-ecr-login@v1

               - name: Build and tag image
                 id: build-image
                 env:
                      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                      ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
                      PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING: "1"

                 run: |
                      # Build a docker container and push it to ECR
                      git_hash=$(git rev-parse --short "$GITHUB_SHA")
                      docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash ./auth
                      echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash"
                      echo "::set-output name=tag::$git_hash"
               - name: Extract metadata (tags, labels) for Docker
                 id: meta
                 uses: docker/metadata-action@v4.1.1
                 with:
                      images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}

               - name: Image Scan
                 uses: aquasecurity/trivy-action@master
                 with:
                      image-ref: "${{ steps.meta.outputs.tags }}-${{ steps.build-image.outputs.tag }}"
                      format: "table"
                      output: "trivy-image-results"
                      severity: "CRITICAL,HIGH"

               - name: Push image to Amazon ECR
                 id: push-image
                 env:
                      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                      ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}

                 run: |
                      echo "Pushing image to ECR..."
                      git_hash=$(git rev-parse --short "$GITHUB_SHA")
                      docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash
                      echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_REF##*/}-$git_hash"

               - name: Update kube config
                 run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

               - name: Deploy to EKS
                 env:
                      IMAGE: ${{ steps.push-image.outputs.image }}
                 run: |
                      sed -i.bak "s|DOCKER_IMAGE|$IMAGE|g" k8s/auth-deployment.yaml && \

                        kubectl apply -f k8s/postgres-deployment.yaml
                        kubectl apply -f k8s/auth-deployment.yaml
                        kubectl apply -f k8s/ingress.yaml
